import{_ as s,c as n,o as a,b as p}from"./chunks/framework.48Co6iSO.js";const u=JSON.parse('{"title":"用户定义字面量","description":"","frontmatter":{"title":"用户定义字面量","create":"2023-07-01T00:00:00.000Z","desc":"C++，User-defined literals（这是一篇旧文章，日期是后来的）"},"headers":[],"relativePath":"blog/userliteral.md","filePath":"blog/userliteral.md"}'),l={name:"blog/userliteral.md"},o=p(`<p>在<a href="https://github.com/nlohmann/json" target="_blank" rel="noreferrer">nlohmann/json</a>中，只需在字符串后写上<code>_json</code>即可自动转为json类型的变量。</p><p>这是什么操作？！一脸懵逼。。。于是翻了下其源代码：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">JSON_HEDLEY_NON_NULL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nlohmann</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">operator</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_json</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nlohmann</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(s, s </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> n);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">JSON_HEDLEY_NON_NULL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nlohmann</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_json</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">s</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nlohmann</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(s, s </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> n);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>哦豁，咋跟重载操作符似的。。。<br> 我没见过啊！还好有注释：</p><blockquote><p>This operator implements a user-defined string literal for JSON objects. It can be used by adding <code>&quot;_json&quot;</code> to a string literal and returns a JSON object if no parse error occurred.</p><p>这个运算符实现了对于JSON对象的“自定义的字符串字面量”。在字符串字面量后加上<code>&quot;_json&quot;</code>就能用，如果解析没错，就返回一个JSON对象。</p></blockquote><p>好！根据<code>user-defined string literal</code>顺藤摸瓜找到了文档。<br> 链接：<a href="https://zh.cppreference.com/w/cpp/language/user_literal" target="_blank" rel="noreferrer">https://zh.cppreference.com/w/cpp/language/user_literal</a></p><hr><p>这东西叫做用户定义字面量，User-defined literals。</p><p>大概就是在一些值后边加上自定义的标识，就能被你的函数解析啦~~~<br> 函数类似重载运算符，大致是<code>operator &quot;&quot; 标识符</code>。</p><p>支持的类型文档有列出，包括具体用法、具体限制之类的，自己去看看吧~~~<br> 下面示范性地写一小段，在字符串后加入<code>_upper</code>即可全部大写：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">operator</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_upper</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	string </span><span style="color:#B392F0;">s</span><span style="color:#E1E4E8;">(a);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">c : s) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;z&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			c </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	cout </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;abcDEF&quot;</span><span style="color:#F97583;">_upper</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> //ABCDEF</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_upper</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	string </span><span style="color:#6F42C1;">s</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">c : s) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;z&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			c </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abcDEF&quot;</span><span style="color:#D73A49;">_upper</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //ABCDEF</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,11),e=[o];function t(c,r,E,y,i,F){return a(),n("div",null,e)}const _=s(l,[["render",t]]);export{u as __pageData,_ as default};
